//TEF6686HN/V102 xdr-gtk控制程序
//作者 eggplant886
// rds add by stailus - base from https://github.com/stailus/tef6686_rds
// niq_ro added some switches using stailus hints
// niq_ro added encoder for volume
// niq_ro added LCD2004 (i2c) 
// niq_ro added RT and PI from RDS data using (again) hints from stailus
// niq_addded PTY
// niq_ro added RT from makserge - https://github.com/makserge/tef6686_radio
// niq_ro added scrolling text

#include <Wire.h>
#include <Arduino.h>

#define sw1 5
#define sw2 6
#define sw3 7
#define sw4 8
#define sw5 9
#define sw6 10

#define encoder1 2
#define encoder2 3
#define encodersw 4

#include <Encoder.h> // from http://www.pjrc.com/teensy/td_libs_Encoder.html
Encoder knob(encoder2, encoder1); //encoder connected to pins 2 and 3 (and ground)

#include <LiquidCrystal_I2C.h>  // https://github.com/fdebrabander/Arduino-LiquidCrystal-I2C-library
LiquidCrystal_I2C lcd(0x3F,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display

int knobval; // value for the rotation of the knob
//boolean buttonflag = false; // default value for the button flag

byte antena[] = {
  B11111,
  B10101,
  B10101,
  B01110,
  B01110,
  B00100,
  B00100,
  B00100
};


byte difuzor[] = {
  B00001,
  B00011,
  B11101,
  B10101,
  B10101,
  B11101,
  B00011,
  B00001
};

byte difuzor2[] = {
  B10000,
  B11000,
  B10111,
  B10101,
  B10101,
  B10111,
  B11000,
  B10000
};

byte j = 0;
//byte plus = 0;
int nivel = 0;
//int q = 0;

int16_t nDeemphasis, volume;
uint32_t freq;
char streo;

//rds
char rdsProgramId[5];
char rdsProgramService[9];
char programServiceUnsafe[9];
uint8_t prevAddress = 3;
uint32_t psErrors = 0xFFFFFFFF;
bool psAB;
uint8_t psCharIsSet = 0;
char unsafePs[2][8];
char rdsProgramServiceUnsafe[9];
char rdsProgramType[17];
char rdsRadioText[64]; // 32 characters
//char rdsRadioText1[72]; // 20 spaces + 32 characters + 20 spaces
uint8_t rdsAb;
uint8_t isRdsNewRadioText;
int doarRT0 = 0;
byte doarRT = 0;

uint16_t FREQMIN = 8750;
uint16_t FREQMAX = 10800;

// Serial
#define SERIAL_BUFFER_SIZE 16
char buff[SERIAL_BUFFER_SIZE];
uint8_t buff_pos = 0;
uint16_t REG_FREQ;
uint32_t timer = 0;// Signal level reporting timer
uint32_t timer_rds = 0;// RDS reporting timer
uint32_t timer_scroll = 300;// time to scroll text
int8_t current_filter = -1;   // Current FIR filter (-1 is adaptive)
int8_t current_set = -1;   // Current FIR filter (-1 is adaptive)


// Scan
uint16_t scan_start = 0;
uint16_t scan_end = 0;
uint16_t scan_step = 0;
uint8_t scan_filter = 0;

#define TIMER_INTERVAL 250
#define RDS_TIMER_INTERVAL 87
//#define RDS_TIMER_INTERVAL 1000
#define DSP_I2C 0x64

static const uint8_t DSP_INIT[] PROGMEM =
{
  0x03,0x1c,0x00,0x00,
  0x03,0x1C,0x00,0x74,
  0x19,0x1B,0xF0,0x00,0x38,0x38,0xD0,0x80,0xF0,0x00,0x38,0x40,0xD0,0x80,0x43,0xB2,0x38,0x43,0xD0,0x80,0xF0,0x00,0x70,0x00,0xC2,0xF7,
  0x19,0x1B,0xF0,0x00,0x38,0x74,0xD0,0x80,0x80,0xFC,0x39,0x17,0xD0,0x80,0xC2,0x38,0x20,0x11,0x40,0xB7,0x9F,0xA7,0x39,0x1C,0xD2,0x80,
  0x19,0x1B,0x9F,0xA7,0x39,0x26,0xD2,0x80,0xF0,0x00,0x39,0x2D,0xD0,0x80,0xF0,0x00,0x39,0x30,0xD0,0x80,0x90,0x41,0x39,0x52,0xDD,0x80,
  0x19,0x1B,0xF0,0x00,0x3A,0x29,0xD0,0x80,0xF0,0x00,0x39,0x56,0xD0,0x80,0xF0,0x00,0x3A,0x2B,0xD0,0x80,0xC4,0xA2,0x02,0x16,0x60,0x04,
  0x19,0x1B,0xF0,0x00,0x39,0xC3,0xD0,0x80,0xF0,0x00,0x39,0xEB,0xD0,0x80,0x90,0x01,0x39,0x58,0xD0,0x80,0xF0,0x00,0x38,0xF9,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x39,0x5F,0xD2,0x80,0xF0,0x00,0x39,0x63,0xD0,0x80,0x43,0x84,0x39,0x6D,0xD0,0x80,0xF0,0x00,0x39,0x70,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x39,0x74,0xD0,0x80,0x9E,0x30,0x18,0xF9,0xD2,0x80,0xF0,0x00,0x39,0x7A,0xD0,0x80,0xF0,0x00,0x39,0x7D,0xD0,0x80,
  0x19,0x1B,0x30,0x77,0x39,0xE2,0xD0,0x80,0xF0,0x00,0x39,0x80,0xD0,0x80,0x32,0x00,0x39,0x82,0xD0,0x80,0xF0,0x00,0x39,0x84,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x39,0xCB,0xD0,0x80,0xF0,0x00,0x39,0xF9,0xD0,0x80,0xA8,0x01,0x3A,0x17,0xD0,0x80,0xF0,0x00,0x3A,0x36,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x3A,0x3D,0xD0,0x80,0xF0,0x00,0x3A,0x3F,0xD0,0x80,0xF0,0x00,0x3A,0x53,0xD0,0x80,0xF0,0x00,0x3A,0x56,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x3A,0x59,0xD0,0x80,0xF0,0x00,0x3A,0x5C,0xD0,0x80,0xF0,0x00,0x70,0x00,0xF0,0x00,0xF0,0x00,0x3A,0x61,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x3A,0x22,0xD2,0x80,0xF0,0x00,0x3A,0x6F,0xD0,0x80,0x00,0x43,0x3A,0x7E,0xD9,0x80,0xF0,0x00,0x3A,0x88,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x3A,0xDE,0xD0,0x80,0xF0,0x00,0x3A,0xE1,0xD0,0x80,0xF0,0x00,0x3A,0xF2,0xD0,0x80,0x2E,0x40,0x3B,0x90,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x3B,0x9A,0xD0,0x80,0xF0,0x00,0x0E,0x3F,0x60,0x00,0x50,0x10,0x28,0xD8,0xD2,0x80,0x91,0x01,0x01,0x36,0x60,0x00,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xA0,0x18,0xF0,0x00,0x70,0x00,0xA0,0xD8,0xF0,0x00,0x70,0x00,0xA0,0xF9,0xF0,0x00,0x70,0x00,0xA1,0xB5,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xA2,0x09,0xF0,0x00,0x70,0x00,0xA2,0x34,0xF0,0x00,0x70,0x00,0xA2,0x4C,0xF0,0x00,0x20,0x31,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x04,0xC1,0x60,0x08,0xF0,0x00,0x01,0x01,0xD2,0x80,0xF0,0x00,0x00,0x30,0xD0,0x80,0x00,0x7F,0x60,0x02,0xE2,0x00,
  0x19,0x1B,0xF0,0x00,0x0E,0x22,0x60,0x0A,0xF0,0x00,0x00,0xFF,0x60,0x03,0xF0,0x00,0x01,0x42,0xD2,0x80,0x90,0x03,0x40,0x02,0xF0,0x00,
  0x19,0x1B,0x90,0x43,0x01,0x70,0xD1,0x80,0xF0,0x00,0x01,0x69,0xD0,0x80,0x0E,0x69,0x60,0x0A,0xA3,0x52,0x20,0x23,0x00,0x01,0x60,0x01,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xF0,0x00,0xC4,0xCB,0x70,0x00,0xF0,0x00,0xCA,0x09,0x30,0x23,0xF0,0x00,0xC2,0xCB,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x30,0x23,0xD0,0x08,0x82,0x00,0x0D,0x50,0x60,0x08,0xF0,0x00,0x0D,0x51,0x60,0x09,0x30,0x00,0x21,0x80,0x60,0x01,
  0x19,0x1B,0xF0,0x00,0x40,0x32,0xF0,0x00,0x30,0x11,0x45,0xF3,0xF0,0x00,0x30,0x92,0x2D,0x30,0x60,0x04,0x31,0x13,0x2D,0x40,0x60,0x05,
  0x19,0x1B,0x31,0x94,0x7F,0xFF,0x60,0x06,0x32,0x15,0x0D,0x61,0x60,0x0A,0x32,0x96,0x0D,0x6B,0x60,0x0B,0x33,0x10,0x0D,0x50,0x60,0x01,
  0x19,0x1B,0x33,0x90,0x0D,0x5C,0x60,0x02,0x30,0x21,0x0D,0x63,0x60,0x03,0x30,0x31,0x0D,0x75,0x60,0x0C,0x30,0xA2,0x8D,0x00,0x60,0x01,
  0x19,0x1B,0x30,0xB3,0x01,0x73,0x60,0x02,0x30,0x41,0x00,0x25,0x60,0x03,0x30,0xC2,0x40,0x44,0xF0,0x00,0x31,0x43,0x40,0x35,0xF0,0x00,
  0x19,0x1B,0x31,0xC4,0x64,0x00,0x60,0x06,0x32,0x45,0x1F,0x40,0x60,0x07,0x32,0xC6,0x70,0x00,0xF0,0x00,0x33,0x47,0x1E,0xBC,0x60,0x0D,
  0x19,0x1B,0x33,0xC0,0x01,0x22,0x60,0x01,0x34,0x40,0xFD,0xEE,0x60,0x02,0x30,0x51,0x7B,0x8F,0x60,0x03,0x30,0xD2,0xC4,0x29,0x60,0x04,
  0x19,0x1B,0x31,0x51,0x1E,0xC2,0x60,0x0E,0x32,0x53,0xFF,0x0D,0x60,0x02,0x32,0xD4,0x7D,0x2E,0x60,0x03,0x30,0x61,0xC1,0x9A,0x60,0x04,
  0x19,0x1B,0x30,0xE2,0x70,0x00,0xF0,0x00,0x31,0x61,0x70,0x00,0xF0,0x00,0x32,0x63,0x70,0x00,0xF0,0x00,0x32,0xE4,0x70,0x00,0xD0,0x08,
  0x19,0x1B,0xF0,0x00,0x03,0x70,0xD2,0x80,0xF0,0x00,0x70,0x00,0xA0,0x02,0xF0,0x00,0x70,0x00,0xA0,0x59,0xF0,0x00,0x02,0x15,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x0D,0x51,0x60,0x0F,0xF0,0x00,0x05,0x17,0x60,0x0E,0x23,0xF6,0x70,0x00,0xF0,0x00,0xF0,0x00,0x21,0x63,0x41,0xF5,
  0x19,0x1B,0x91,0x8F,0x21,0xF8,0x40,0x74,0xC3,0xEF,0x21,0xE0,0xF0,0x00,0xC3,0xA4,0x33,0xF7,0xF0,0x00,0xD8,0x5B,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x82,0x18,0x70,0x00,0xF0,0x00,0x9F,0xAF,0x18,0x00,0xF0,0x00,0x9F,0x0F,0x31,0xF8,0x90,0x02,0xF0,0x00,0x70,0x00,0x90,0x28,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xD0,0x08,0xF0,0x00,0x22,0x78,0xF0,0x00,0x16,0xD3,0x60,0x09,0xA0,0x7F,0x35,0xF0,0x1E,0xBC,0x60,0x0D,
  0x19,0x1B,0xF0,0x00,0x0D,0x61,0x60,0x08,0xF0,0x00,0x03,0xA5,0xD2,0x80,0xF0,0x00,0x1E,0xC2,0x60,0x0D,0xF0,0x00,0x0D,0x6B,0x60,0x08,
  0x19,0x1B,0xF0,0x00,0x03,0xA5,0xD2,0x80,0xF0,0x00,0x21,0x00,0xF0,0x00,0x83,0x6D,0x22,0xF1,0xF0,0x00,0xF0,0x00,0x23,0x77,0xF0,0x00,
  0x19,0x1B,0x90,0x41,0x36,0x70,0xF0,0x00,0x9E,0x79,0x70,0x00,0x90,0x01,0xF0,0x00,0x32,0xF1,0xD0,0x08,0x91,0xC7,0x33,0x75,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x34,0x70,0xE6,0x00,0xF0,0x00,0x34,0xF0,0xE6,0x00,0xF0,0x00,0x24,0x74,0xF0,0x00,0xF0,0x00,0x24,0xF3,0xF0,0x00,
  0x19,0x1B,0x8C,0x24,0x26,0xF2,0x40,0x16,0x8A,0x1B,0x34,0x74,0x4F,0xF5,0x82,0xB7,0x34,0xF3,0xF0,0x00,0xF0,0x00,0x20,0x71,0x90,0x05,
  0x19,0x1B,0x83,0x04,0x70,0x00,0xF0,0x00,0x8E,0x67,0x70,0x00,0xF0,0x00,0xF0,0x00,0x70,0x00,0x90,0x02,0xF0,0x00,0x36,0xF6,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x34,0xF0,0x80,0x06,0x82,0xAF,0x70,0x00,0xF0,0x00,0x82,0x1B,0x70,0x00,0xD0,0x09,0x8E,0x5F,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xD0,0x09,0xF0,0x00,0x36,0xF5,0xF0,0x00,0xF0,0x00,0x34,0x70,0xF0,0x00,0x40,0x11,0x27,0x72,0xA2,0xF5,
  0x19,0x1B,0x90,0x8A,0x20,0xF3,0xA2,0xF4,0x8E,0xD7,0x37,0x72,0xF0,0x00,0xF0,0x00,0x37,0xF1,0xE6,0x00,0xF0,0x00,0x70,0x00,0xD0,0x08,
  0x19,0x1B,0xF0,0x00,0x22,0x7A,0xF0,0x00,0x16,0xC3,0x60,0x09,0xA0,0x58,0xF0,0x00,0x18,0x20,0xF0,0x00,0xF0,0x00,0x35,0x70,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x32,0x7A,0xD0,0x08,0x82,0x00,0x0D,0x51,0x60,0x08,0x40,0x03,0x70,0x00,0xF0,0x00,0x33,0x80,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x21,0x06,0x70,0x00,0xF0,0x00,0x37,0x00,0x70,0x00,0xF0,0x00,0x37,0x80,0x40,0x15,0xF0,0x00,0x36,0x83,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x33,0x05,0x0D,0x61,0x60,0x09,0x32,0x86,0x0D,0x6B,0x60,0x0A,0x32,0x10,0x70,0x00,0xF0,0x00,0x32,0x90,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x33,0x10,0x70,0x00,0xF0,0x00,0x33,0x90,0x70,0x00,0xF0,0x00,0x34,0x10,0x70,0x00,0xF0,0x00,0x34,0x90,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x31,0x10,0x70,0x00,0xF0,0x00,0x31,0x90,0x70,0x00,0xF0,0x00,0x32,0x20,0x70,0x00,0xF0,0x00,0x32,0xA0,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x33,0x20,0x70,0x00,0xF0,0x00,0x33,0xA0,0x70,0x00,0xF0,0x00,0x34,0x20,0x70,0x00,0xF0,0x00,0x34,0xA0,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x31,0x20,0x70,0x00,0xF0,0x00,0x31,0xA0,0x70,0x00,0xF0,0x00,0x82,0x00,0x0D,0x30,0x60,0x0A,0x0D,0x40,0x60,0x0B,0xC0,0x10,
  0x19,0x1B,0xF0,0x00,0x10,0x20,0xF0,0x00,0x0D,0x51,0x60,0x0C,0xC0,0x10,0xF0,0x00,0x10,0x30,0xF0,0x00,0xF0,0x00,0x35,0xC0,0xD0,0x08,
  0x19,0x1B,0xF0,0x00,0x0D,0x75,0x60,0x0F,0xF0,0x00,0x05,0x63,0x60,0x0E,0x24,0xF7,0x05,0x1D,0x60,0x0D,0x25,0x76,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x91,0xC7,0x20,0xE8,0x40,0x15,0x91,0x8F,0x21,0xE9,0xD4,0x09,0xC3,0xEF,0x20,0x00,0x40,0x12,0x9F,0xBE,0x20,0x11,0x58,0x03,
  0x19,0x1B,0xA0,0x80,0x35,0x77,0x90,0x01,0xF0,0x00,0x70,0x00,0xD0,0x08,0xF0,0x00,0x21,0xF5,0xF0,0x00,0xA0,0xCA,0x22,0x54,0xF0,0x00,
  0x19,0x1B,0xCC,0x09,0x05,0x17,0x60,0x0C,0x83,0x2C,0x70,0x00,0xF0,0x00,0x8A,0x61,0x70,0x00,0xF0,0x00,0xAE,0x48,0x22,0x45,0xA2,0xBD,
  0x19,0x1B,0xA2,0x28,0x20,0x78,0xF0,0x00,0xF0,0x00,0x35,0xF0,0xF0,0x00,0xF0,0x00,0x18,0x00,0xF0,0x00,0xF0,0x00,0x30,0x78,0xF0,0x00,
  0x19,0x1B,0x16,0xE3,0x60,0x09,0xA0,0x27,0x89,0x01,0x23,0xF4,0xF0,0x00,0xF0,0x00,0x20,0xF2,0xF0,0x00,0x82,0x61,0x21,0x73,0xF0,0x00,
  0x19,0x1B,0xA0,0x50,0x36,0x70,0xF0,0x00,0xA0,0x58,0x23,0x72,0xE1,0x40,0xA8,0x01,0x22,0xF3,0xF0,0x00,0x90,0x49,0x22,0x75,0xE0,0x40,
  0x19,0x1B,0x80,0x61,0x70,0x00,0xF0,0x00,0x8A,0x51,0x33,0xF1,0xF0,0x00,0xA0,0x58,0x70,0x00,0xF0,0x00,0xAF,0x48,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x34,0x70,0xD0,0x08,0x82,0x00,0x0D,0x75,0x60,0x08,0x90,0x09,0x0D,0x00,0x60,0x09,0xF0,0x00,0x35,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x33,0x80,0xC0,0x28,0xF0,0x00,0x10,0x10,0xF0,0x00,0xF0,0x00,0x34,0x81,0xD0,0x08,0x82,0x49,0x0D,0x75,0x60,0x08,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x8F,0xFD,0x04,0x00,0x60,0x00,0xA2,0xA3,0x8E,0xC0,0x40,0x00,0x60,0x05,0x60,0x00,0x60,0x05,0xE6,0x00,
  0x19,0x1B,0xC8,0x1B,0x70,0x00,0xF0,0x00,0xD8,0xDB,0x0D,0x51,0x60,0x08,0x83,0x5B,0x70,0x00,0xF0,0x00,0x9E,0xBA,0x30,0x03,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x30,0x84,0xD4,0x09,0xF0,0x00,0x70,0x00,0x8F,0xAF,0xF0,0x00,0x0D,0x75,0x60,0x08,0xF0,0x00,0x0D,0x51,0x60,0x09,
  0x19,0x1B,0xF0,0x00,0x24,0x03,0xF0,0x00,0xF0,0x00,0x27,0x94,0xD0,0x08,0xA0,0x03,0x70,0x00,0xF0,0x00,0x00,0x11,0x08,0x00,0xF0,0x00,
  0x19,0x1B,0x00,0x11,0x08,0x00,0xC0,0x0E,0xA0,0x09,0x00,0x11,0x08,0x00,0xA0,0x09,0x70,0x00,0xF0,0x00,0xA4,0x08,0x70,0x00,0xD0,0x08,
  0x19,0x1B,0xA0,0x03,0x70,0x00,0xF0,0x00,0x00,0x11,0x08,0x00,0xF0,0x00,0x00,0x11,0x08,0x00,0xC0,0x26,0xA0,0x09,0x00,0x11,0x08,0x00,
  0x19,0x1B,0xA0,0x09,0x70,0x00,0xF0,0x00,0xA4,0x08,0x70,0x00,0xD0,0x08,0xF0,0x00,0x1D,0x01,0x60,0x08,0xF0,0x00,0x0A,0x2C,0x60,0x00,
  0x19,0x1B,0xF0,0x00,0x01,0x1A,0x60,0x01,0x31,0x00,0x70,0x00,0xF0,0x00,0x31,0x81,0x70,0x00,0xD0,0x08,0xA8,0x01,0x7F,0xFF,0x60,0x06,
  0x19,0x1B,0xCC,0x0A,0x70,0x00,0xF0,0x00,0x8E,0xA1,0x31,0x06,0xF0,0x00,0xF0,0x00,0x32,0x06,0xD4,0x09,0xAE,0xE8,0x04,0xDF,0xD0,0x80,
  0x19,0x1B,0x90,0x87,0x70,0x00,0x98,0x07,0xF0,0x00,0x0F,0xB1,0xD2,0x80,0x9E,0x08,0x41,0x89,0x60,0x06,0x14,0x92,0x60,0x00,0x90,0x04,
  0x19,0x1B,0xA1,0x98,0x1D,0x01,0x60,0x08,0xAA,0x56,0x70,0x00,0xF0,0x00,0xA2,0x20,0x32,0x06,0xF0,0x00,0xF0,0x00,0x32,0x80,0xF0,0x00,
  0x19,0x1B,0x91,0xC2,0x06,0x9A,0x60,0x08,0x41,0xE6,0x06,0x00,0xD0,0x80,0x82,0x13,0x70,0x00,0xD8,0x09,0xF0,0x00,0x0F,0xB1,0xD2,0x80,
  0x19,0x1B,0x9E,0x08,0x10,0x62,0x60,0x01,0x05,0x1F,0x60,0x05,0xD0,0x09,0xF0,0x00,0x06,0xE6,0x60,0x08,0xA3,0x65,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x30,0x85,0xD0,0x08,0x10,0x00,0x60,0x03,0xA2,0x6F,0x30,0x23,0x07,0x73,0xD2,0x80,0xF0,0x00,0x07,0xC6,0xD0,0x80,
  0x19,0x1B,0x08,0x00,0x60,0x03,0xA0,0x02,0x0E,0x6F,0x60,0x09,0xF0,0x00,0x02,0x00,0x60,0x03,0x80,0x00,0xF0,0x00,0x07,0x73,0xD0,0x80,
  0x19,0x1B,0x40,0xE0,0x00,0x1F,0x60,0x01,0x13,0xD5,0x60,0x07,0xA0,0x11,0x90,0x40,0x70,0x00,0xF0,0x00,0x13,0xFB,0x60,0x06,0xA0,0x0E,
  0x19,0x1B,0x14,0x05,0x60,0x06,0xA0,0x0D,0x14,0x0F,0x60,0x06,0xA0,0x0C,0x45,0x60,0x00,0x3A,0x60,0x01,0x13,0xB6,0x60,0x07,0xA0,0x0B,
  0x19,0x1B,0x90,0x40,0x70,0x00,0xF0,0x00,0x13,0xF7,0x60,0x06,0xA0,0x08,0x14,0x01,0x60,0x06,0xA0,0x07,0x14,0x0B,0x60,0x06,0xA0,0x06,
  0x19,0x1B,0x41,0x80,0x00,0x3B,0x60,0x01,0x13,0xB6,0x60,0x07,0xA0,0x05,0x90,0x40,0x70,0x00,0xF0,0x00,0x13,0xF7,0x60,0x06,0xA0,0x02,
  0x19,0x1B,0x14,0x01,0x60,0x06,0xA0,0x01,0x14,0x0B,0x60,0x06,0x80,0x00,0xF0,0x00,0x0D,0x28,0xD0,0x80,0xD7,0xCA,0x00,0xFF,0x60,0x04,
  0x19,0x1B,0x81,0xD7,0x0C,0xF7,0x60,0x09,0xD0,0x56,0x70,0x00,0xF0,0x00,0x82,0x76,0x30,0x17,0xF0,0x00,0xD0,0xF6,0x40,0x83,0xF0,0x00,
  0x19,0x1B,0xC1,0xA4,0x20,0x19,0xF0,0x00,0x82,0xF6,0x70,0x00,0xF0,0x00,0xC1,0x80,0x20,0x17,0xA2,0x4E,0xC3,0xE7,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xC5,0xC7,0x70,0x00,0xF0,0x00,0xF0,0x00,0x30,0x17,0xD0,0x08,0x9A,0x78,0x70,0x00,0xF0,0x00,0x9A,0x70,0x70,0x00,0x90,0xDE,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x90,0xDE,0xF0,0x00,0x0D,0x67,0xD0,0x80,0xF0,0x00,0x70,0x00,0xA1,0x14,0xF0,0x00,0x70,0x00,0x80,0xCD,
  0x19,0x1B,0x1E,0xC8,0x60,0x08,0xA2,0x44,0xF0,0x00,0x20,0x00,0xA2,0x43,0x90,0x00,0x70,0x00,0xF0,0x00,0xF0,0x00,0x70,0x00,0xD4,0x09,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x8F,0xA5,0x1E,0xC8,0x60,0x08,0xA2,0x3F,0xF0,0x00,0x30,0x00,0xD0,0x08,0x00,0x28,0x60,0x00,0xA2,0x3D,
  0x19,0x1B,0x9E,0x38,0x0E,0xF4,0x60,0x09,0x9E,0x38,0x70,0x00,0x9F,0xFF,0xF0,0x00,0x70,0x00,0xD0,0x08,0x40,0x40,0x0C,0x8A,0xD5,0x80,
  0x19,0x1B,0xF0,0x00,0x0C,0x8B,0xD2,0x80,0xF0,0x00,0x0F,0xB1,0xD2,0x80,0x9C,0x39,0x70,0x00,0xF0,0x00,0x9C,0x31,0x70,0x00,0x90,0x03,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x90,0x02,0x40,0x10,0x70,0x00,0xAF,0xF3,0x41,0xF1,0x40,0x40,0x80,0x0D,0x40,0x00,0x70,0x00,0xAF,0xF1,
  0x19,0x1B,0x41,0xF1,0x40,0x40,0x80,0x0C,0x03,0xE8,0x60,0x02,0xA2,0x2F,0x90,0x83,0x10,0x44,0xD1,0x80,0xF0,0x00,0x10,0x42,0xD0,0x80,
  0x19,0x1B,0x40,0x71,0x40,0x20,0xA0,0x08,0x43,0xA1,0x40,0x30,0xA0,0x07,0x43,0xB1,0x40,0x30,0xA0,0x06,0xF0,0x00,0x10,0x75,0xD0,0x80,
  0x19,0x1B,0x40,0x71,0x40,0x20,0xA0,0x04,0x43,0xA1,0x40,0x30,0xA0,0x02,0x43,0xB1,0x40,0x30,0xA0,0x01,0xF0,0x00,0x10,0x81,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x0C,0x92,0xD0,0x80,0xF0,0x00,0x0C,0x94,0xD0,0x80,0xF0,0x00,0x0B,0xC9,0x60,0x08,0xF0,0x00,0x1D,0x8D,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x16,0xD5,0xD0,0x80,0xF0,0x00,0x0B,0xC9,0x60,0x08,0xF0,0x00,0x1D,0x8F,0xD2,0x80,0xF0,0x00,0x16,0xDA,0xD0,0x80,
  0x19,0x1B,0x3E,0x91,0x1F,0x5F,0xD2,0x80,0xF0,0x00,0x23,0x8A,0xD0,0x80,0x0D,0x85,0x60,0x08,0xA2,0x1A,0xF0,0x00,0x30,0x00,0xD0,0x08,
  0x19,0x1B,0xF0,0x00,0x0F,0x88,0x60,0x0B,0xF0,0x00,0x02,0x30,0x60,0x03,0xF0,0x00,0x09,0x38,0x60,0x04,0x9F,0x98,0x01,0x2C,0x60,0x05,
  0x19,0x1B,0xF0,0x00,0x2E,0xB3,0xEE,0x00,0xF0,0x00,0x0F,0xB1,0xD2,0x80,0x9E,0x09,0x0D,0x87,0x60,0x0C,0x9F,0x90,0x70,0x00,0x90,0x02,
  0x19,0x1B,0x9F,0x88,0x2F,0x34,0xEE,0x00,0xF0,0x00,0x2F,0xB5,0xEE,0x00,0x30,0x43,0x0B,0x42,0x60,0x08,0xF0,0x00,0x30,0xC4,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x31,0x45,0xF0,0x00,0xF0,0x00,0x2C,0xB1,0x40,0x17,0xF0,0x00,0x2D,0x32,0xF0,0x00,0xC6,0x79,0x22,0x05,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x3D,0x81,0xF0,0x00,0xF0,0x00,0x3D,0x01,0xF0,0x00,0xDD,0x6D,0x1B,0x93,0xD2,0x80,0x90,0x46,0x0D,0x85,0x60,0x0A,
  0x19,0x1B,0x20,0x42,0x1B,0x93,0xD2,0x80,0xDA,0xC9,0x20,0x25,0xA2,0x03,0x8C,0x69,0x2D,0xB3,0xF0,0x00,0xDD,0x49,0x32,0x01,0xF0,0x00,
  0x19,0x1B,0x8D,0x89,0x70,0x00,0xF0,0x00,0x3C,0x81,0xFE,0x35,0x60,0x00,0x35,0x81,0x00,0x16,0x60,0x01,0xA0,0x18,0x21,0x46,0xF0,0x00,
  0x19,0x1B,0xAA,0x07,0x01,0x2D,0x60,0x00,0x81,0xCF,0x70,0x00,0xF0,0x00,0x8F,0x80,0x70,0x00,0xF0,0x00,0xF0,0x00,0x70,0x00,0x94,0x02,
  0x19,0x1B,0x40,0x45,0x57,0x4B,0x60,0x00,0xE0,0x00,0x60,0x01,0x80,0x02,0x40,0x65,0x40,0x00,0x60,0x00,0xC6,0x66,0x60,0x01,0x80,0x00,
  0x19,0x1B,0xA0,0x30,0x40,0x00,0x60,0x04,0xAF,0x4E,0x00,0xA4,0x60,0x05,0x81,0x8E,0x0B,0x75,0x60,0x08,0xF0,0x00,0x14,0x74,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x1B,0x90,0xD2,0x80,0x2E,0x34,0x04,0x00,0x60,0x06,0x20,0xC2,0x1B,0x93,0xD2,0x80,0xD2,0xC9,0x03,0xE9,0x60,0x05,
  0x19,0x1B,0x81,0x8E,0x0B,0x59,0x60,0x08,0x8F,0x2D,0x31,0xC6,0xF0,0x00,0xF0,0x00,0x70,0x00,0x94,0x02,0x40,0x45,0xB1,0x5C,0x60,0x03,
  0x19,0x1B,0x46,0x66,0x60,0x07,0x80,0x02,0x40,0x65,0xAA,0xCE,0x60,0x03,0xC6,0x66,0x60,0x07,0x80,0x00,0xA0,0xE0,0x00,0x38,0x60,0x04,
  0x19,0x1B,0xAF,0x48,0x00,0x1D,0x60,0x05,0x81,0xC7,0x31,0x84,0xF0,0x00,0x31,0x05,0x14,0x74,0xD2,0x80,0xF0,0x00,0x1B,0x90,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0xD8,0x00,0x60,0x00,0xF0,0x00,0x0B,0x67,0x60,0x08,0x21,0xC6,0x20,0x00,0x60,0x04,0xF0,0x00,0x13,0x33,0x60,0x05,
  0x19,0x1B,0x81,0x86,0x31,0x84,0x40,0x07,0x31,0x05,0x14,0x74,0xD2,0x80,0xF0,0x00,0x1B,0x90,0xD0,0x80,0xF0,0x00,0x6E,0x6C,0x60,0x03,
  0x19,0x1B,0x40,0x07,0x00,0xE5,0x60,0x05,0xA0,0x58,0xFF,0xFF,0x60,0x03,0xAA,0x24,0x0B,0x52,0x60,0x08,0x81,0x1C,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x31,0x05,0x7F,0xDF,0x60,0x06,0x31,0x84,0x14,0x74,0xD2,0x80,0xF0,0x00,0x1B,0x90,0xD0,0x80,0x91,0x83,0x2E,0x85,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x2F,0x06,0xF0,0x00,0xF0,0x00,0x2F,0x87,0xF0,0x00,0x0B,0xC9,0x60,0x09,0xA1,0xCE,0x3E,0x11,0x0D,0x82,0x60,0x0A,
  0x19,0x1B,0xF0,0x00,0x27,0x11,0xA1,0xCC,0xA0,0x50,0x27,0x92,0xF0,0x00,0xAA,0x41,0x0B,0xB4,0x60,0x0C,0x80,0x52,0x20,0x21,0xA1,0xC9,
  0x19,0x1B,0x9E,0xCB,0x35,0x92,0xF0,0x00,0x90,0x41,0x70,0x00,0xD8,0x09,0x88,0x2D,0x70,0x00,0xD4,0x09,0xF0,0x00,0x36,0x15,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x36,0x95,0xF0,0x00,0x91,0x00,0x30,0xA6,0xF0,0x00,0x31,0x27,0x14,0x62,0xD2,0x80,0x90,0x04,0x31,0xC0,0xF0,0x00,
  0x19,0x1B,0x21,0x45,0x8C,0xCD,0x60,0x06,0xF0,0x00,0xFF,0x55,0x60,0x07,0xF0,0x00,0x14,0x74,0xD2,0x80,0xF0,0x00,0x32,0x40,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x32,0xC1,0xF0,0x00,0xF0,0x00,0x33,0x42,0x80,0x00,0xF0,0x00,0x0D,0x82,0x60,0x09,0xF0,0x00,0x0B,0xC9,0x60,0x0A,
  0x19,0x1B,0xF0,0x00,0x20,0x15,0xA1,0xB8,0x91,0x45,0x7F,0xEC,0x60,0x06,0x40,0x47,0x70,0x00,0xD4,0x09,0x20,0x90,0x14,0x47,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x34,0xA0,0xF0,0x00,0x21,0x10,0x14,0x47,0xD2,0x80,0xF0,0x00,0x35,0x20,0xD0,0x08,0x0A,0x3D,0x60,0x07,0xA1,0xB1,
  0x19,0x1B,0xA2,0x79,0x0B,0xC9,0x60,0x09,0xA2,0xBA,0x70,0x00,0xF0,0x00,0x90,0xC0,0x3B,0x91,0xF0,0x00,0x3B,0x12,0x14,0x62,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x3C,0x10,0xD0,0x08,0xF0,0x00,0x0B,0x60,0x60,0x0E,0xF0,0x00,0x00,0x04,0x60,0x03,0x40,0xA7,0x3F,0xFC,0x60,0x04,
  0x19,0x1B,0x32,0x63,0x80,0x08,0x60,0x05,0x32,0xE4,0x19,0x9A,0x60,0x06,0x33,0x65,0x0D,0x86,0x60,0x0F,0x31,0xE6,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x30,0x77,0x70,0x00,0xD0,0x08,0x0D,0x82,0x60,0x0A,0xA1,0xA3,0xF0,0x00,0x30,0x20,0xF0,0x00,0x00,0xD2,0x60,0x01,0x94,0x0B,
  0x19,0x1B,0xF0,0x00,0x00,0xD2,0x60,0x02,0x00,0xFA,0x60,0x03,0xAF,0xED,0xF0,0x00,0xBE,0x77,0x60,0x06,0xF0,0x00,0x4B,0x00,0x60,0x07,
  0x19,0x1B,0x37,0x06,0x00,0x01,0x60,0x01,0x37,0x87,0x03,0xE8,0x60,0x02,0xF0,0x00,0x03,0x84,0x60,0x04,0xF0,0x00,0x00,0x01,0x60,0x05,
  0x19,0x1B,0xF0,0x00,0x00,0x8C,0x60,0x06,0xF0,0x00,0x0A,0xF0,0x60,0x07,0xF0,0x00,0x70,0x00,0x8F,0xC7,0xF0,0x00,0x0B,0xB4,0x60,0x09,
  0x19,0x1B,0xF0,0x00,0x00,0x11,0x60,0x05,0xF0,0x00,0x00,0x11,0x60,0x06,0x3B,0x05,0x10,0x00,0x60,0x07,0x3B,0x86,0x00,0x04,0x60,0x00,
  0x19,0x1B,0x3C,0x07,0xAD,0x84,0x60,0x01,0x32,0x10,0x01,0xFD,0x60,0x02,0x32,0x91,0x0B,0x5E,0x60,0x03,0x33,0x12,0x0C,0x80,0x60,0x04,
  0x19,0x1B,0x31,0x93,0x00,0xA0,0x60,0x05,0x34,0x84,0xFF,0xD0,0x60,0x06,0x35,0x05,0xE3,0x54,0x60,0x07,0x36,0x06,0x34,0x00,0x60,0x00,
  0x19,0x1B,0x36,0x86,0x00,0x01,0x60,0x01,0x37,0x07,0x03,0xE8,0x60,0x02,0x37,0x80,0x70,0x00,0x8F,0xB7,0x80,0xE5,0x7F,0xFF,0x60,0x00,
  0x19,0x1B,0xCC,0x0A,0x70,0x00,0xF0,0x00,0x8E,0xA9,0x33,0x70,0xF0,0x00,0xAF,0x20,0x34,0x70,0xD4,0x09,0xAE,0xE8,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xA8,0x05,0x00,0x80,0x60,0x07,0xA8,0xF6,0x33,0x75,0xF0,0x00,0xC3,0x86,0x70,0x00,0xF0,0x00,0x8F,0x7F,0x33,0xF6,0xF0,0x00,
  0x19,0x1B,0xA8,0x85,0x1D,0xE4,0xD1,0x80,0xF0,0x00,0x34,0x75,0xD0,0x08,0x0D,0x86,0x60,0x09,0xA1,0x7A,0x20,0x12,0x1F,0x32,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x35,0x82,0xD0,0x08,0x90,0x82,0x0D,0x86,0x60,0x09,0x40,0xA7,0x40,0x77,0xE6,0x40,0xF0,0x00,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x30,0x17,0xD0,0x08,0x0B,0xB4,0x60,0x08,0xA1,0x73,0xF0,0x00,0x31,0x82,0xD0,0x08,0xF0,0x00,0x09,0x61,0x60,0x08,
  0x19,0x1B,0xF0,0x00,0x09,0xC9,0x60,0x09,0xF0,0x00,0x21,0x80,0xF0,0x00,0xF0,0x00,0x20,0x91,0xA1,0x6E,0xA2,0x08,0x70,0x00,0xD0,0x08,
  0x19,0x1B,0x00,0xCF,0x60,0x02,0xA0,0x01,0x01,0x51,0x60,0x02,0x80,0x01,0x0D,0x8B,0x60,0x08,0x80,0x01,0x0D,0x8C,0x60,0x08,0x80,0x00,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xF0,0x00,0xF0,0x00,0x30,0x02,0xD0,0x08,0x0F,0xF2,0x60,0x09,0xA1,0x66,0x20,0x11,0x0D,0x8B,0x60,0x0A,
  0x19,0x1B,0xF0,0x00,0x2C,0x92,0xF0,0x00,0x90,0x41,0x20,0x11,0xF0,0x00,0xF0,0x00,0x70,0x00,0x93,0xFE,0xF0,0x00,0x70,0x00,0xF2,0x00,
  0x19,0x1B,0x31,0x22,0x20,0x31,0xD0,0x80,0x0D,0x8B,0x60,0x08,0xA0,0x03,0xF0,0x00,0x20,0x22,0xD0,0x80,0x0D,0x8C,0x60,0x08,0xA0,0x01,
  0x19,0x1B,0xF0,0x00,0x20,0x1E,0xD0,0x80,0xF0,0x00,0x70,0x00,0xF0,0x00,0x20,0x00,0x0E,0x69,0x60,0x08,0xF0,0x00,0x01,0xD0,0x60,0x01,
  0x19,0x1B,0xF0,0x00,0x30,0x80,0xF0,0x00,0xF0,0x00,0x30,0x01,0xD0,0x08,0x83,0x6D,0x0C,0x35,0x60,0x08,0x40,0x60,0x3A,0x51,0x60,0x01,
  0x19,0x1B,0x41,0xE2,0x21,0x96,0x60,0x03,0x33,0x00,0x41,0x44,0xF0,0x00,0x33,0x81,0x70,0x00,0xF0,0x00,0x34,0x02,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x34,0x83,0x0C,0x29,0x60,0x09,0x35,0x04,0x3A,0x5F,0x60,0x00,0x35,0x85,0x3A,0x64,0x60,0x03,0x30,0x90,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x33,0x93,0x70,0x00,0x8F,0xDF,0xF0,0x00,0x70,0x00,0xAE,0x5F,0xF0,0x00,0x70,0x00,0x8E,0xA4,0xF0,0x00,0x70,0x00,0xAE,0x9D,
  0x19,0x1B,0xF0,0x00,0x0C,0x51,0xD2,0x80,0xF0,0x00,0x21,0xA0,0xD0,0x80,0xF0,0x00,0x05,0x2E,0xD2,0x80,0xF0,0x00,0x70,0x00,0xA0,0x0E,
  0x19,0x1B,0xF0,0x00,0x21,0xB7,0xD0,0x80,0xF0,0x00,0x1F,0x32,0xD2,0x80,0xF0,0x00,0x1E,0x84,0xD2,0x80,0xF0,0x00,0x21,0xE0,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x1E,0xA4,0xD2,0x80,0xF0,0x00,0x07,0xF7,0xD2,0x80,0xF0,0x00,0x22,0x15,0xD0,0x80,0xF0,0x00,0x07,0xFB,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x22,0x8F,0xD0,0x80,0x40,0x40,0x22,0xE1,0xD2,0x80,0x40,0x80,0x22,0xE2,0xD2,0x80,0xF0,0x00,0x22,0x9C,0xD0,0x80,
  0x19,0x1B,0xF0,0x00,0x07,0xFB,0xD2,0x80,0xF0,0x00,0x22,0xB6,0xD0,0x80,0xF0,0x00,0x20,0xF0,0xD2,0x80,0x90,0x02,0x27,0xDF,0xD2,0x80,
  0x19,0x1B,0x9E,0x69,0x70,0x00,0xF0,0x00,0xF0,0x00,0x07,0x00,0xD1,0x80,0xF0,0x00,0x23,0x20,0xD0,0x80,0x90,0x82,0x0C,0x29,0x60,0x09,
  0x19,0x1B,0x40,0x17,0x40,0x67,0xE6,0x40,0xF0,0x00,0x70,0x00,0xF0,0x00,0xF0,0x00,0x32,0x17,0xD0,0x08,0xF0,0x00,0x07,0xF7,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x27,0xEA,0xD2,0x80,0xF0,0x00,0x11,0xB5,0xD0,0x80,0x40,0x55,0x15,0x17,0x60,0x08,0xF0,0x00,0x1D,0x40,0x60,0x00,
  0x19,0x1B,0x31,0x05,0x1E,0x60,0x60,0x01,0x31,0x85,0x70,0x00,0xF0,0x00,0x32,0x05,0x70,0x00,0xF0,0x00,0x32,0x85,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x33,0x00,0x70,0x00,0xF0,0x00,0x33,0x81,0x0D,0x8E,0x60,0x09,0x34,0x00,0x02,0x54,0x60,0x02,0x34,0x81,0x38,0x80,0x60,0x03,
  0x19,0x1B,0x30,0x12,0x70,0x00,0xF0,0x00,0x30,0x93,0x70,0x00,0xD0,0x08,0x17,0x0B,0x60,0x0C,0xA1,0x1E,0x00,0x40,0x40,0x05,0xF0,0x00,
  0x19,0x1B,0x00,0x41,0x24,0x3F,0xD0,0x80,0xF0,0x00,0x0C,0x83,0x60,0x08,0x90,0x00,0x0C,0x6B,0x60,0x0B,0xF0,0x00,0x70,0x0C,0xE6,0x00,
  0x19,0x1B,0xF0,0x00,0x20,0x03,0xF0,0x00,0xF0,0x00,0x22,0x04,0xF0,0x00,0xF0,0x00,0x3B,0xB3,0xF0,0x00,0xF0,0x00,0x3C,0x34,0xD0,0x08,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xAD,0xC1,0xF0,0x00,0x0C,0x8D,0x60,0x08,0xF0,0x00,0x26,0x0A,0xD0,0x80,0x83,0xFF,0x0D,0x9B,0x60,0x08,
  0x19,0x1B,0xF0,0x00,0x01,0xF4,0x60,0x00,0xF0,0x00,0x03,0xB1,0x60,0x01,0x10,0x00,0x03,0xB2,0x60,0x02,0x10,0x01,0x04,0x0E,0x60,0x00,
  0x19,0x1B,0x10,0x02,0x04,0x0F,0x60,0x01,0x10,0x00,0x04,0x5C,0x60,0x02,0x10,0x01,0x04,0x5D,0x60,0x00,0x10,0x02,0x13,0x80,0x60,0x01,
  0x19,0x1B,0x10,0x00,0x0D,0xAB,0x60,0x09,0x10,0x01,0x02,0xEE,0x60,0x00,0x10,0x07,0x43,0x06,0x60,0x01,0x10,0x10,0x04,0x69,0x60,0x02,
  0x19,0x1B,0x10,0x11,0x44,0x87,0x60,0x00,0x10,0x12,0x05,0xE3,0x60,0x01,0x10,0x10,0x46,0x08,0x60,0x02,0x10,0x11,0x06,0xAE,0x60,0x00,
  0x19,0x1B,0x10,0x12,0x0D,0xA4,0x60,0x08,0x10,0x10,0x9E,0x3C,0x60,0x00,0x10,0x17,0x0D,0xB3,0x60,0x09,0x10,0x00,0x25,0xDA,0x60,0x00,
  0x19,0x1B,0x10,0x07,0x80,0x3D,0x60,0x01,0x10,0x10,0x28,0x82,0x60,0x02,0x10,0x11,0xC0,0x3D,0x60,0x00,0x10,0x12,0x28,0x87,0x60,0x01,
  0x19,0x1B,0x10,0x10,0xC0,0x3B,0x60,0x02,0x10,0x11,0x28,0x8C,0x60,0x00,0x10,0x12,0xC0,0x3B,0x60,0x01,0x10,0x10,0x28,0x91,0x60,0x02,
  0x19,0x1B,0x10,0x11,0xC0,0x3B,0x60,0x00,0x10,0x12,0x28,0x96,0x60,0x01,0x10,0x10,0xC0,0x3B,0x60,0x02,0x10,0x11,0x28,0x9B,0x60,0x00,
  0x19,0x1B,0x10,0x12,0xC0,0x3B,0x60,0x01,0x10,0x10,0x28,0xA0,0x60,0x02,0x10,0x11,0x40,0x3C,0x60,0x00,0x10,0x12,0x28,0xA5,0x60,0x01,
  0x19,0x1B,0x10,0x10,0xC0,0x3C,0x60,0x02,0x10,0x11,0x28,0xAA,0x60,0x00,0x10,0x12,0xC0,0x3C,0x60,0x01,0x10,0x10,0x28,0xAF,0x60,0x02,
  0x19,0x1B,0x10,0x11,0xC0,0x3C,0x60,0x00,0x10,0x12,0x28,0xB4,0x60,0x01,0x10,0x10,0xC0,0x3C,0x60,0x02,0x10,0x11,0x28,0xB9,0x60,0x00,
  0x19,0x1B,0x10,0x12,0xC0,0x3C,0x60,0x01,0x10,0x10,0x28,0xBE,0x60,0x02,0x10,0x11,0xC0,0x3C,0x60,0x00,0x10,0x12,0x29,0xCC,0x60,0x01,
  0x19,0x1B,0x10,0x10,0x00,0x37,0x60,0x02,0x10,0x11,0x29,0xD1,0x60,0x00,0x10,0x12,0x00,0x37,0x60,0x01,0x10,0x10,0x29,0xD6,0x60,0x02,
  0x19,0x1B,0x10,0x11,0x00,0x37,0x60,0x00,0x10,0x12,0x29,0xDB,0x60,0x01,0x10,0x10,0x00,0x37,0x60,0x02,0x10,0x11,0x0D,0xD8,0x60,0x08,
  0x19,0x1B,0x10,0x12,0x27,0x15,0x60,0x00,0x10,0x17,0x40,0x3E,0x60,0x01,0x10,0x00,0x27,0x1A,0x60,0x02,0x10,0x01,0x80,0x3C,0x60,0x00,
  0x19,0x1B,0x10,0x02,0x28,0x64,0x60,0x01,0x10,0x00,0x40,0x3C,0x60,0x02,0x10,0x01,0x28,0x69,0x60,0x00,0x10,0x02,0x40,0x3C,0x60,0x01,
  0x19,0x1B,0x10,0x00,0x28,0x6E,0x60,0x02,0x10,0x01,0x80,0x3A,0x60,0x00,0x10,0x02,0x28,0x73,0x60,0x01,0x10,0x00,0x80,0x3A,0x60,0x02,
  0x19,0x1B,0x10,0x01,0x28,0xA0,0x60,0x00,0x10,0x02,0x40,0x3C,0x60,0x01,0x10,0x00,0x29,0xCC,0x60,0x02,0x10,0x01,0x00,0x37,0x60,0x00,
  0x19,0x1B,0x10,0x02,0x29,0xD1,0x60,0x01,0x10,0x00,0x00,0x37,0x60,0x02,0x10,0x01,0x29,0xD6,0x60,0x00,0x10,0x02,0x00,0x37,0x60,0x01,
  0x19,0x1B,0x10,0x00,0x29,0xDB,0x60,0x02,0x10,0x01,0x00,0x37,0x60,0x00,0x10,0x02,0x0D,0xEF,0x60,0x09,0x10,0x00,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x10,0x07,0x70,0x00,0xF0,0x00,0x10,0x17,0x70,0x00,0xD0,0x08,0x0C,0xDF,0x60,0x0B,0xA0,0xBE,0x30,0x30,0x23,0xD6,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x26,0xE8,0xD0,0x80,0x0D,0x9B,0x60,0x08,0xA0,0xBB,0xF0,0x00,0x00,0x02,0xA0,0xBA,0x90,0x82,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x82,0x8A,0x70,0x00,0x90,0x03,0x90,0x8A,0x70,0x00,0x90,0x01,0xF0,0x00,0x70,0x00,0x8F,0xFB,0x82,0xBF,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x01,0x99,0xD2,0x80,0xF0,0x00,0x0D,0x9A,0x60,0x08,0xF0,0x00,0x26,0xC1,0xF0,0x00,0xF0,0x00,0x00,0x02,0xA0,0xB1,
  0x19,0x1B,0x90,0x82,0x70,0x00,0xF0,0x00,0x82,0x8A,0x70,0x00,0x90,0x03,0x90,0x8A,0x70,0x00,0x90,0x01,0xF0,0x00,0x70,0x00,0x8F,0xFB,
  0x19,0x1B,0x82,0x80,0x70,0x00,0xF0,0x00,0xF0,0x00,0x70,0x00,0xD0,0x08,0xF0,0x00,0x0D,0xAB,0x60,0x0D,0xF0,0x00,0x3F,0xFF,0x60,0x02,
  0x19,0x1B,0xF0,0x00,0x00,0x51,0xA0,0xA8,0xC2,0x53,0x70,0x00,0xF0,0x00,0x8E,0xC4,0x70,0x00,0x90,0x01,0xF0,0x00,0x70,0x00,0x97,0xFC,
  0x19,0x1B,0xD4,0x8F,0x01,0x99,0xD2,0x80,0x40,0x05,0x0D,0xA4,0x60,0x0D,0x40,0x17,0x3F,0xFF,0x60,0x02,0x9F,0x7D,0x00,0x51,0xA0,0xA1,
  0x19,0x1B,0xC2,0x53,0x70,0x00,0xF0,0x00,0x82,0xC4,0x27,0x1C,0xD1,0x80,0xF0,0x00,0x70,0x00,0x97,0xFC,0x91,0x46,0x27,0x20,0xD0,0x80,
  0x19,0x1B,0x40,0x07,0x01,0x99,0xD2,0x80,0xF0,0x00,0x0D,0x8E,0x60,0x0E,0x40,0x07,0x25,0xC1,0xA0,0x9A,0x9E,0x79,0x2E,0x40,0x40,0x14,
  0x19,0x1B,0x40,0x36,0x31,0x67,0x90,0x19,0x2F,0x45,0x19,0x64,0x60,0x02,0x4F,0xF0,0x1A,0x5E,0x60,0x03,0x83,0x54,0x40,0x36,0xF0,0x00,
  0x19,0x1B,0x83,0x5C,0x40,0x00,0xE2,0x00,0xF0,0x00,0x40,0x10,0xE2,0x00,0xF0,0x00,0x70,0x00,0xF0,0x00,0x90,0x00,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x9C,0x11,0xF0,0x00,0x0D,0xD8,0x60,0x0D,0x40,0x36,0x22,0xF0,0xD2,0x80,0x0D,0xB3,0x60,0x0D,0xE6,0x00,
  0x19,0x1B,0x40,0x14,0x21,0x40,0xF0,0x00,0xF0,0x00,0x20,0x51,0xA0,0x8B,0x90,0x41,0x70,0x00,0xF0,0x00,0x82,0x45,0x70,0x00,0x90,0x1D,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x90,0x01,0xF0,0x00,0x70,0xDC,0x8F,0xFB,0x20,0xD1,0x3F,0xFF,0x60,0x02,0xF0,0x00,0x0C,0xDF,0x60,0x0B,
  0x19,0x1B,0xC2,0x53,0x31,0x61,0xF0,0x00,0xD4,0x8E,0x30,0x33,0xF0,0x00,0xD4,0x4A,0x37,0xC6,0xF0,0x00,0xC6,0xA2,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xC3,0xA0,0x3D,0x42,0xF0,0x00,0xF0,0x00,0x31,0xE0,0xD0,0x08,0xC6,0x24,0x31,0xE0,0xF0,0x00,0x90,0x00,0x3D,0x44,0xF0,0x00,
  0x19,0x1B,0x83,0xB6,0x70,0x00,0xE0,0x40,0x40,0xD5,0x21,0x41,0xA0,0x7B,0xCC,0x0B,0x40,0x00,0xF0,0x00,0x80,0xED,0x23,0xEA,0xD2,0x80,
  0x19,0x1B,0xBF,0x60,0x20,0x60,0xF0,0x00,0xF0,0x00,0x20,0xE1,0xF0,0x00,0xF0,0x00,0x23,0xEA,0xD2,0x80,0x90,0xC6,0x23,0xDE,0xD2,0x80,
  0x19,0x1B,0x4F,0x95,0x40,0x14,0xA0,0x74,0x81,0x75,0x70,0x00,0xF0,0x00,0xAF,0x43,0x70,0x00,0xF0,0x00,0xC2,0xE0,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x80,0xC3,0x0C,0xDF,0x60,0x0B,0xF0,0x00,0x33,0x63,0xF0,0x00,0xF0,0x00,0x34,0xE3,0xF0,0x00,0xF0,0x00,0x30,0x33,0xA0,0x41,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x80,0x12,0x40,0xD5,0x21,0x41,0xA0,0x6B,0xCC,0x0B,0x40,0x00,0xF0,0x00,0x80,0xED,0x23,0xEA,0xD2,0x80,
  0x19,0x1B,0xBF,0x60,0x20,0x60,0xF0,0x00,0xF0,0x00,0x20,0xE1,0xF0,0x00,0xF0,0x00,0x23,0xEA,0xD2,0x80,0x90,0xC6,0x23,0xDE,0xD2,0x80,
  0x19,0x1B,0x4F,0x95,0x40,0x14,0xA0,0x64,0x81,0x75,0x70,0x00,0x40,0x06,0xAF,0x43,0x70,0x00,0xF0,0x00,0xC2,0xE0,0x0C,0xDF,0x60,0x0B,
  0x19,0x1B,0xF0,0x00,0x31,0xE0,0xF0,0x00,0x80,0xC3,0x40,0x36,0xE6,0x00,0xC6,0x24,0x30,0x33,0xF0,0x00,0xF0,0x00,0x33,0x63,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x34,0xE3,0xF0,0x00,0xF0,0x00,0x3D,0x44,0xF0,0x00,0xF0,0x00,0x37,0xC6,0xA0,0x2E,0xF0,0x00,0x23,0x66,0xA0,0x31,
  0x19,0x1B,0x82,0x92,0x0B,0xB8,0x60,0x03,0x47,0xF4,0x23,0xE0,0xD2,0x80,0x52,0x08,0x60,0x05,0x98,0x03,0x82,0x92,0x52,0x08,0x60,0x03,
  0x19,0x1B,0x47,0xF4,0x23,0xE0,0xD2,0x80,0x52,0x08,0x60,0x05,0x98,0x23,0xF0,0x00,0x33,0xE4,0xF0,0x00,0xF0,0x00,0x34,0x65,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x35,0x64,0xF0,0x00,0xF0,0x00,0x35,0xE5,0xF0,0x00,0xF0,0x00,0x23,0x66,0xA0,0x4E,0x91,0x8E,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x33,0x66,0xA0,0x24,0x82,0x92,0x52,0x08,0x60,0x03,0xF0,0x00,0x23,0xE0,0xD2,0x80,0xF0,0x00,0x70,0x00,0x9C,0x05,
  0x19,0x1B,0x82,0x92,0x0B,0xB8,0x60,0x03,0xF0,0x00,0x23,0xE0,0xD2,0x80,0xF0,0x00,0x70,0x00,0x9B,0xF7,0x0D,0x94,0x60,0x0D,0xA0,0x2B,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x8F,0xF5,0xF0,0x00,0x24,0xE6,0xA0,0x43,0x9F,0xBE,0x70,0x00,0xF0,0x00,0xF0,0x00,0x34,0xE6,0xA0,0x19,
  0x19,0x1B,0x82,0x92,0x52,0x08,0x60,0x03,0xF0,0x00,0x23,0xE0,0xD2,0x80,0xF0,0x00,0x70,0x00,0x9C,0x05,0x82,0x92,0x0B,0xB8,0x60,0x03,
  0x19,0x1B,0xF0,0x00,0x23,0xE0,0xD2,0x80,0xF0,0x00,0x70,0x00,0x9B,0xF7,0x0D,0x97,0x60,0x0D,0xA0,0x20,0xF0,0x00,0x70,0x00,0x8F,0xF5,
  0x19,0x1B,0x40,0x14,0x23,0xE1,0xA0,0x38,0xC2,0x63,0x25,0x62,0xF0,0x00,0xF0,0x00,0x24,0x65,0x90,0x07,0xC2,0xA3,0x25,0xE6,0xF0,0x00,
  0x19,0x1B,0x90,0x80,0x70,0x00,0x90,0x02,0x83,0x77,0x70,0x00,0xF0,0x00,0x25,0x60,0x23,0xE0,0xEB,0xC0,0x0C,0xDF,0x60,0x0B,0xA0,0x31,
  0x19,0x1B,0xF0,0x00,0x30,0x30,0xF0,0x00,0xF0,0x00,0x21,0xE0,0xD0,0x08,0xC2,0xA3,0x25,0xE6,0xF0,0x00,0xF0,0x00,0x70,0x00,0x93,0xF9,
  0x19,0x1B,0x90,0x40,0x70,0x00,0x8F,0xFA,0xF0,0x00,0x21,0xE0,0xAF,0x0F,0xF0,0x00,0x24,0x62,0xD2,0x80,0xF0,0x00,0x32,0x60,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x32,0xE1,0xD0,0x08,0xF0,0x00,0x23,0xED,0xD2,0x80,0xB8,0x68,0x22,0x60,0xF0,0x00,0xF0,0x00,0x22,0xE1,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x23,0xEA,0xD2,0x80,0xF0,0x00,0x23,0xDE,0xD2,0x80,0xA9,0x88,0x70,0x00,0xF0,0x00,0xAB,0xF8,0x23,0xE4,0xD2,0x80,
  0x19,0x1B,0x46,0x43,0x21,0x42,0xA0,0x20,0xA0,0x98,0x70,0x00,0xF0,0x00,0xF0,0x00,0x23,0xE7,0xD2,0x80,0xF0,0x00,0x23,0xC6,0xD2,0x80,
  0x19,0x1B,0x90,0x00,0x70,0x00,0xF0,0x00,0xF0,0x00,0x70,0x00,0xDC,0x09,0xF0,0x00,0x23,0xCE,0xD0,0x80,0x47,0xE5,0x70,0x00,0xF0,0x00,
  0x19,0x1B,0x40,0x16,0x20,0xD3,0xA0,0x18,0x83,0x5D,0x20,0x52,0xF0,0x00,0xC2,0xF5,0x21,0x54,0x98,0x07,0xC2,0xB6,0x70,0x00,0x90,0x02,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0x90,0x05,0xF0,0x00,0x70,0x00,0x80,0x02,0xC2,0xB6,0x70,0x00,0xF0,0x00,0xF0,0x00,0x70,0x00,0xD4,0x09,
  0x19,0x1B,0x82,0x64,0x70,0x00,0xF0,0x00,0xF0,0x00,0x70,0x00,0xDC,0x09,0xF0,0x00,0x31,0x51,0xF0,0x00,0xF0,0x00,0x30,0xD2,0xD0,0x08,
  0x19,0x1B,0x0D,0xEF,0x60,0x0B,0xA0,0x0C,0x9E,0x79,0x20,0x36,0xF0,0x00,0xF0,0x00,0x20,0x45,0xF0,0x00,0x9F,0xBC,0x70,0x00,0xE0,0x40,
  0x19,0x1B,0x91,0x45,0x70,0x00,0xD0,0x09,0x26,0x44,0x27,0x2D,0xD5,0x80,0x91,0x86,0x70,0x00,0xF0,0x00,0xF0,0x00,0x27,0x32,0xD5,0x80,
  0x19,0x1B,0xF0,0x00,0x70,0x00,0xAF,0x67,0x2F,0x41,0x27,0x36,0xD0,0x80,0xF0,0x00,0x29,0x15,0xD2,0x80,0xF0,0x00,0x3B,0x9E,0xD2,0x80,
  0x19,0x1B,0xF0,0x00,0x28,0x88,0xD0,0x80,0xF0,0x00,0x70,0x00,0xD0,0x08,0xF0,0x00,0x16,0xC3,0x60,0x08,0xF0,0x00,0x00,0x9A,0x60,0x00,
  0x19,0x1B,0xF0,0x00,0x02,0xE3,0x60,0x00,0x10,0x00,0x04,0xF4,0x60,0x00,0x10,0x00,0x06,0xFF,0x60,0x00,0x10,0x00,0x09,0x07,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x0B,0x10,0x60,0x00,0x10,0x00,0x0D,0x1F,0x60,0x00,0x10,0x00,0x0F,0x65,0x60,0x00,0x10,0x00,0x0F,0x65,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x0D,0x1F,0x60,0x00,0x10,0x00,0x0B,0x10,0x60,0x00,0x10,0x00,0x09,0x07,0x60,0x00,0x10,0x00,0x06,0xFF,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x04,0xF4,0x60,0x00,0x10,0x00,0x02,0xE3,0x60,0x00,0x10,0x00,0x00,0x9A,0x60,0x00,0xF0,0x00,0x10,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x10,0x00,0xF0,0x00,0xF0,0x00,0x16,0xD3,0x60,0x08,0xF0,0x00,0xFF,0x93,0x60,0x00,0xF0,0x00,0xFE,0x37,0x60,0x00,
  0x19,0x1B,0x10,0x00,0xFD,0xD9,0x60,0x00,0x10,0x00,0xFE,0x9F,0x60,0x00,0x10,0x00,0x03,0x85,0x60,0x00,0x10,0x00,0x0D,0x6B,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x16,0x84,0x60,0x00,0x10,0x00,0x1E,0x49,0x60,0x00,0x10,0x00,0x1E,0x49,0x60,0x00,0x10,0x00,0x16,0x84,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x0D,0x6B,0x60,0x00,0x10,0x00,0x03,0x85,0x60,0x00,0x10,0x00,0xFE,0x9F,0x60,0x00,0x10,0x00,0xFD,0xD9,0x60,0x00,
  0x19,0x1B,0x10,0x00,0xFE,0x37,0x60,0x00,0x10,0x00,0xFF,0x93,0x60,0x00,0xF0,0x00,0x10,0x00,0xF0,0x00,0xF0,0x00,0x10,0x00,0xF0,0x00,
  0x19,0x1B,0xF0,0x00,0x16,0xE3,0x60,0x08,0xF0,0x00,0x00,0x64,0x60,0x00,0xF0,0x00,0xFF,0xA8,0x60,0x00,0x10,0x00,0xFF,0xA6,0x60,0x00,
  0x19,0x1B,0x10,0x00,0xFF,0xDF,0x60,0x00,0x10,0x00,0x00,0x01,0x60,0x00,0x10,0x00,0x01,0x28,0x60,0x00,0x10,0x00,0x01,0x2F,0x60,0x00,
  0x19,0x1B,0x10,0x00,0xFD,0x23,0x60,0x00,0x10,0x00,0xFD,0xA1,0x60,0x00,0x10,0x00,0x03,0x89,0x60,0x00,0x10,0x00,0x02,0x54,0x60,0x00,
  0x19,0x1B,0x10,0x00,0xFE,0x7D,0x60,0x00,0x10,0x00,0x00,0x8C,0x60,0x00,0x10,0x00,0xFB,0xE1,0x60,0x00,0x10,0x00,0xF9,0x42,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x0C,0x47,0x60,0x00,0x10,0x00,0x0E,0xA2,0x60,0x00,0x10,0x00,0xEC,0x43,0x60,0x00,0x10,0x00,0xEA,0xCE,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x17,0x46,0x60,0x00,0x10,0x00,0x17,0x46,0x60,0x00,0x10,0x00,0xEA,0xCE,0x60,0x00,0x10,0x00,0xEC,0x43,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x0E,0xA2,0x60,0x00,0x10,0x00,0x0C,0x47,0x60,0x00,0x10,0x00,0xF9,0x42,0x60,0x00,0x10,0x00,0xFB,0xE1,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x00,0x8C,0x60,0x00,0x10,0x00,0xFE,0x7D,0x60,0x00,0x10,0x00,0x02,0x54,0x60,0x00,0x10,0x00,0x03,0x89,0x60,0x00,
  0x19,0x1B,0x10,0x00,0xFD,0xA1,0x60,0x00,0x10,0x00,0xFD,0x23,0x60,0x00,0x10,0x00,0x01,0x2F,0x60,0x00,0x10,0x00,0x01,0x28,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x00,0x01,0x60,0x00,0x10,0x00,0xFF,0xDF,0x60,0x00,0x10,0x00,0xFF,0xA6,0x60,0x00,0x10,0x00,0xFF,0xA8,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x00,0x64,0x60,0x00,0xF0,0x00,0x10,0x00,0xF0,0x00,0xF0,0x00,0x10,0x00,0xF0,0x00,0xF0,0x00,0x17,0x0B,0x60,0x08,
  0x19,0x1B,0xF0,0x00,0x00,0x03,0x60,0x00,0xF0,0x00,0x54,0xC0,0x60,0x00,0x10,0x00,0x00,0x05,0x60,0x00,0x10,0x00,0x00,0x05,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x00,0x0F,0x60,0x00,0x10,0x00,0x00,0x0F,0x60,0x00,0x10,0x00,0x09,0xC0,0x60,0x00,0x10,0x00,0x0A,0x20,0x60,0x00,
  0x19,0x1B,0x10,0x00,0x1D,0x40,0x60,0x00,0x10,0x00,0x1E,0x60,0x60,0x00,0xF0,0x00,0x10,0x00,0xF0,0x00,0xF0,0x00,0x10,0x00,0xF0,0x00,
  0x07,0x1B,0xF0,0x00,0x70,0x00,0xD0,0x08,
  0x03,0x1c,0x00,0x00,
  0x03,0x1C,0x00,0x75,
  0x19,0x1B,0x40,0x13,0x40,0x2F,0x41,0x68,0x41,0xC1,0x42,0x14,0x44,0xDE,0x44,0xE9,0x45,0xFB,0x46,0x11,0x47,0xC5,0x47,0xFC,0x4D,0x5D,
  0x19,0x1B,0x4E,0x56,0x4E,0x58,0x4E,0x5B,0x4D,0x83,0x4E,0x0A,0x4E,0x0B,0x4E,0x49,0x4E,0x53,0x4F,0x92,0x4F,0xEA,0x50,0x41,0x50,0x74,
  0x19,0x1B,0x50,0x80,0x56,0x60,0x56,0xD4,0x56,0xD9,0x58,0x29,0x59,0xB4,0x5A,0x3A,0x5B,0x79,0x5B,0xA2,0x5B,0xEF,0x5D,0xDC,0x60,0x3A,
  0x19,0x1B,0x60,0x88,0x60,0xA8,0x61,0x9F,0x61,0xB6,0x61,0xDF,0x62,0x14,0x62,0x59,0x62,0x9B,0x62,0xA1,0x63,0x69,0x64,0x3B,0x66,0x09,
  0x11,0x1B,0x66,0xE7,0x67,0x0B,0x67,0x1A,0x67,0x29,0x68,0x87,0x68,0x99,0x68,0xA7,0x68,0xB2,
  0x03,0x1c,0x00,0x00,
  0x03,0x14,0x00,0x01,
  0x02,0xFF,50,
  0x09,0x40,0x04,0x01,0x00,0x8C,0xA0,0x00,0x00,0x00,
  0x05,0x40,0x05,0x01,0x00,0x01,
  0x02,0xFF,100,
  0x05,0x20,0x14,0x01,0x00,0x01, //FM_Set_MphSuppression(1,1)
  0x05,0x20,0x16,0x01,0x00,0x01, //FM_Set_ChannelEqualizer(1,1)
  0x09,0x20,0x36,0x01,0x00,0x03,0x00,0x78,0x00,0xA0, //FM_Set_HighCut_Mph(1,3,120,160)
  0x07,0x20,0x37,0x01,0x00,0x01,0x09,0x60, //FM_Set_HighCut_Max(1,1,2400)
  0x07,0x20,0x39,0x01,0x00,0x01,0x00,0x64, //FM_Set_Lowcut_Max(1,100)
  0x09,0x20,0x40,0x01,0x00,0x03,0x00,0x64,0x00,0x96, //FM_Set_Stereo_Mph(1,3,100,150)
  0x09,0x20,0x3E,0x01,0x00,0x03,0x01,0xCC,0x00,0xF0,             // FM_Set_Stereo_Level (1, 3, 460, 240)
  0x11,0x20,0x3C,0x01,0x00,0xC8,0x0F,0xA0,0x00,0x14,0x00,0x50,      // FM_Set_Stereo_Time (1, 200, 4000, 20, 80)
  0x11,0x20,0x3D,0x01,0x00,0x00,0x00,0xD2,0x00,0x5A,0x01,0xF4,      // FM_Set_Stereo_Mod (1, 0, 210, 90, 500)
  0x07,0x20,0x42,0x01,0x00,0x00,0x01,0x90,               // FM_Set_Stereo_Min (1, 0, 400)
  0x05,0x20,0x41,0x01,0x00,0x01,                   // FM_Set_Stereo_Max (1, 1)
  0x09,0x20,0x48,0x01,0x00,0x03,0x02,0x58,0x00,0xF0,             // FM_Set_StHiBlend_Level (1, 3, 600, 240)
  0x11,0x20,0x46,0x01,0x01,0xF4,0x07,0xD0,0x00,0x14,0x00,0x14,       // FM_Set_StHiBlend_Time (1, 500, 2000, 20, 20)
  0x11,0x20,0x47,0x01,0x00,0x00,0x00,0xF0,0x00,0x78,0x02,0x9E,       // FM_Set_StHiBlend_Mod (1, 0, 240, 120, 670)
  0x09,0x20,0x4A,0x01,0x00,0x03,0x00,0x50,0x00,0x8C,        // FM_Set_StHiBlend_Mph (1, 3, 80, 140)
  0x09,0x20,0x49,0x01,0x00,0x03,0x00,0x50,0x00,0x8C,             // FM_Set_StHiBlend_Noise (1, 3, 80, 140)
  0x07,0x20,0x4C,0x01,0x00,0x00,0x1B,0x58,               // FM_Set_StHiBlend_Min (1, 0, 7000)
  0x07,0x20,0x4B,0x01,0x00,0x01,0x0F,0xA0,                   // FM_Set_StHiBlend_Max (1, 1, 4000)
};

//                                           0    1    2    3     4     5     6     7     8     9    10   11   12   13   14   15    16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31
const uint8_t FMFilterMap[32] PROGMEM = { 320, 480, 560, 640, 720, 840, 1140, 1330, 1510, 1680, 1840, 2360, 2540, 2860, 3110, 3200, 320, 360, 420, 480, 560, 560, 560, 560, 640, 720, 840, 840, 960, 1140, 1330, 1510 };

void Write(uint8_t *buf, uint8_t len)
{
  Wire.beginTransmission(DSP_I2C);
  for (int i = 0; i < len; i++)
    Wire.write(*buf++);
  Wire.endTransmission();
}

void Read(uint8_t *buf, uint8_t len)
{
  uint8_t lenrec = Wire.requestFrom(DSP_I2C, len);
  for (int i = 0; i < lenrec; i++)
    *buf++ = Wire.read();
}

void Set_Cmd(uint8_t mdl, uint8_t cmd, int len, ...)
{
  uint8_t buf[31];
  uint16_t temp;
  va_list vArgs;
  va_start(vArgs, len);
  buf[0] = mdl;
  buf[1] = cmd;
  buf[2] = 1;
  for (uint8_t i = 0; i< len; i++)
  {
    temp = va_arg(vArgs, uint16_t);
    buf[3 + i * 2] = (uint8_t)(temp >> 8);
    buf[4 + i * 2] = (uint8_t)temp;
  }
  va_end(vArgs);
  Write(buf, len * 2 + 3);
}

void Get_Cmd(uint8_t mdl, uint8_t cmd, uint16_t *receive, int len)
{
  uint8_t buf[3];
  buf[0] = mdl;
  buf[1] = cmd;
  buf[2] = 1;
  Write(buf, 3);
  Read((uint8_t*)receive, 2 * len);
  for (uint8_t i = 0; i < len; i++)
  {
    uint16_t newval = (uint8_t)(receive[i] >> 8) | (((uint8_t)(receive[i])) << 8);
    receive[i] = newval;
  }
}

void dsp_write_data(const uint8_t* data)
{
  uint8_t *pa = (uint8_t *)data;
  uint8_t len, i, first;
  for (;;)
  {
    len = pgm_read_byte_near(pa++);
    first = pgm_read_byte_near(pa);
    if (!len)
      break;
    if (len == 2 && first == 0xff)
    {
      int delaytime = pgm_read_byte_near(++pa);
      delay(delaytime);
      pa++;
    }
    else
    {
      Wire.beginTransmission(DSP_I2C);
      for (int i = 0; i < len; i++)
        Wire.write(pgm_read_byte_near(pa++));
      Wire.endTransmission();
    }
  }
}

void scan(bool continous)
{
  uint32_t freq;
  uint32_t buffer;
  Set_Cmd(32, 10, 4, scan_filter == -1 ? 1 : 0, pgm_read_byte_near(FMFilterMap + scan_filter), 1000, 1000);
  Set_Cmd(32, 1, 2, 1, scan_start);
  do
  {
    Serial.print('U');
    for (freq = scan_start; freq <= scan_end; freq += scan_step)
    {
      Set_Cmd(32, 1, 2, 1, freq);
      Serial.print(freq * 10, DEC);
      Serial.print('=');
      delay(10);
      int16_t uQuality[2] = { 0 };
      Get_Cmd(32, 128, uQuality, 2);
      Serial.print(uQuality[1] / 10, DEC);
      Serial.print(',');
    }
    Serial.print('\n');
  } while (continous && !Serial.available());
  // Restore previous settings
  Set_Cmd(32, 10, 4, current_filter == -1 ? 1 : 0, pgm_read_byte_near(FMFilterMap + current_filter), 1000, 1000);
  Set_Cmd(32, 1, 2, 1, REG_FREQ);
}

void setup()
{
  Wire.begin();
 // Serial.begin(115200);
  
  pinMode(sw1, INPUT);
  pinMode(sw2, INPUT);
  pinMode(sw3, INPUT);
  pinMode(sw4, INPUT);
  pinMode(sw5, INPUT);
  pinMode(sw6, INPUT);   
  pinMode(encodersw, INPUT);  
 digitalWrite(sw1, HIGH);
 digitalWrite(sw2, HIGH);
 digitalWrite(sw3, HIGH);
 digitalWrite(sw4, HIGH);
 digitalWrite(sw5, HIGH);
 digitalWrite(sw6, HIGH);
 digitalWrite(encodersw, HIGH);

  lcd.begin(); // initialize the LCD
  lcd.createChar(0, antena);
  lcd.createChar(1, difuzor);
  lcd.createChar(2, difuzor2);
  // Print a message to the LCD.
  lcd.backlight();
  lcd.clear(); 
  // Print a logo message to the LCD.
  lcd.setCursor(0,0);
  lcd.print(" TEF6686 radio v.8.0");
  lcd.setCursor(0,1);
  lcd.print(" github.com/stailus ");
  lcd.setCursor(0,2);
  lcd.print("  updated by niq_ro ");
  lcd.setCursor(0,3);
  lcd.print(" github.com/tehniq3 ");
  delay (3000);
  lcd.clear();
    
  delay(40);
  uint16_t uState;
  Get_Cmd(64, 128, &uState, 1);
  if (uState < 2)
    dsp_write_data(DSP_INIT);
  else if (uState > 2)
  {
    Set_Cmd(64, 1, 1, 0);
  }
/*  
  while (true)
  {
    if (Serial.available() > 0)
    {
      if (Serial.read() == 'x')
      {
        while (!Serial.available());
        if (Serial.read() == '\n')
          break;
      }
    }
  }
  delay(20);
  
  while (Serial.available() > 0)
    Serial.read();  // clear the serial buffer
  Serial.print("\nOK\n");
*/

 Set_Cmd(32, 31, 1, 500);
 
//REG_FREQ2 = 131.4;
   Set_Cmd(48, 11, 1, 0);//unmute
  volume = 56;
  Set_Cmd(48, 10, 1, volume * 7 - 600);
//  REG_FREQ = 8870;
//  REG_FREQ = 10000;
  REG_FREQ = 10450; 
  Set_Cmd(32, 1, 2, 1, REG_FREQ);
  
  clearRDS();
}

void loop()
{

 knob.write(0);
    lcd.setCursor(19,1);
    lcd.print(" ");
    knobval = knob.read();
    if (knobval < -1) { //bit of software de-bounce
      knobval = -4;
     lcd.setCursor(19,1);
    lcd.print("+");
    }
    if (knobval > 1) {
      knobval = 4;
        lcd.setCursor(19,1);
        lcd.print("-");
    }

 if (knobval != 0) 
    {   
      volume += knobval; 
      if (volume < 0) volume = 0;
      if (volume > 100) volume = 100;
      Serial.print("Y");
      Serial.println(volume);
      Set_Cmd(48, 10, 1, volume * 7 - 600);
      delay(50);
    }


if (digitalRead(sw1) == LOW)
    {
      volume -= 4;
      if (volume < 0) volume = 0;
      Serial.print("Y");
      Serial.println(volume);
      Set_Cmd(48, 10, 1, volume * 7 - 600);
    } 
    
if (digitalRead(sw2) == LOW)
    {
      volume += 4;
      if (volume > 100) volume = 100;
      Serial.print("Y");
      Serial.println(volume);
      Set_Cmd(48, 10, 1, volume * 7 - 600);
      delay(250);
    } 

if (digitalRead(sw3) == LOW)
    {
      clearRDS();
     Serial.println("f+");
     REG_FREQ -= 10;
     if (REG_FREQ < FREQMIN) REG_FREQ = FREQMAX;
 //    Serial.print("T");
     Serial.println(REG_FREQ*10);
     Set_Cmd(32, 1, 2, 1, REG_FREQ);//freq- 
      Serial.print('V');
        Serial.print(60, DEC);  // Pseudo DAA
        Serial.print("\nT");
        Serial.print((uint32_t)REG_FREQ * 10, DEC);
        Serial.print('\n');
      delay(250);
    } 

if (digitalRead(sw4) == LOW)
    {
      clearRDS();
    Serial.println("f+");
    REG_FREQ += 10;
    if (REG_FREQ > FREQMAX) REG_FREQ = FREQMIN;
 //   Serial.print("T");
    Serial.println(REG_FREQ*10);
    Set_Cmd(32, 1, 2, 1, REG_FREQ);//freq+ 
     Serial.print('V');
        Serial.print(60, DEC);  // Pseudo DAA
        Serial.print("\nT");
        Serial.print((uint32_t)REG_FREQ * 10, DEC);
        Serial.print('\n');
    delay(250);
    } 

if (digitalRead(sw5) == LOW)
    {
      clearRDS();
  Serial.println("scan-");
     int16_t uQuality1[2] = { 0 };
     while (uQuality1[1] / 10 < 42)
//      while (uQuality1[2] / 10 > 9)
     {
    REG_FREQ -= 10;
    if (REG_FREQ < FREQMIN) REG_FREQ = FREQMAX;
 //   Serial.print("T");
    Serial.println(REG_FREQ*10);
    Set_Cmd(32, 1, 2, 1, REG_FREQ);//freq+ 
     Serial.print('V');
        Serial.print(60, DEC);  // Pseudo DAA
        Serial.print("\nT");
        Serial.print((uint32_t)REG_FREQ*10, DEC);
        Serial.print('\n');
        delay(75);
   //uQuality1[2] = { 0 };
   Get_Cmd(32, 128, uQuality1, 8);
       Serial.println(uQuality1[1] / 10);
    }
    } 

if (digitalRead(sw6) == LOW)
    {
      clearRDS();
    Serial.println("scan+");
     int16_t uQuality1[2] = { 0 };
     while (uQuality1[1] / 10 < 42)
//      while (uQuality1[2] / 10 > 9)
     {
    REG_FREQ += 10;
    if (REG_FREQ > FREQMAX) REG_FREQ = FREQMIN;
 //   Serial.print("T");
    Serial.println(REG_FREQ*10);
    Set_Cmd(32, 1, 2, 1, REG_FREQ);//freq+ 
     Serial.print('V');
        Serial.print(60, DEC);  // Pseudo DAA
        Serial.print("\nT");
        Serial.print((uint32_t)REG_FREQ*10, DEC);
        Serial.print('\n');
        delay(75);
   //uQuality1[2] = { 0 };
   Get_Cmd(32, 128, uQuality1, 8);
       Serial.println(uQuality1[1] / 10);
    }
    }
 
  // check signal level and 19kHz subcarrier every TIMER_INTERVAL
  if ((millis() - timer) >= TIMER_INTERVAL)
  {
    Serial.print('S');
    uint16_t uStatus;
    Get_Cmd(32, 133, &uStatus, 1);
    streo = (uStatus & (1 << 15)) ? 's' : 'm';
    Serial.print(streo);
    int16_t uQuality[4] = { 0 };
    Get_Cmd(32, 128, uQuality, 8);
    Serial.print(uQuality[1] / 10, DEC);
     nivel = uQuality[1] / 10;
    Serial.print(',');
    Serial.print(uQuality[3] / 10, DEC);
    Serial.print(',');
    Serial.print(uQuality[2] / 10, DEC);
    Serial.print('\n');
    timer = millis();
  }


  if ((millis() - timer_rds) >= RDS_TIMER_INTERVAL)
  {
    lcd.setCursor(10,0);
    //q = 0;
    get_RDS();
    timer_rds = millis();
  }

/*
  int16_t nDeemphasis, volume;
  uint32_t freq;
*/
  if (Serial.available() > 0)
  {
    buff[buff_pos] = Serial.read();
    if (buff[buff_pos] != '\n' && buff_pos != SERIAL_BUFFER_SIZE - 1)
      buff_pos++;
    else {
      buff[buff_pos] = 0x00;
      buff_pos = 0;
      switch (buff[0])
      {
      case 'x':
        Serial.println("OK");
        break;
      case 'D':  // Change the de-emphasis
        nDeemphasis = atoi(buff + 1);
        if (nDeemphasis == 0)
          Set_Cmd(32, 31, 1, 500);
        else  if (nDeemphasis == 1)
          Set_Cmd(32, 31, 1, 750);
        else if (nDeemphasis == 2) {
          Set_Cmd(32, 31, 1, 0);
        }
        Serial.print("D");
        Serial.println(nDeemphasis);
        break;
      case 'Y':  // Audio volume scaler
        volume = atoi(buff + 1);
        if(volume == 0){
          Set_Cmd(48, 11, 1, 1);//mute
        } else {
          Set_Cmd(48, 11, 1, 0);//unmute
          Set_Cmd(48, 10, 1, volume * 7 - 600);
        }
        Serial.print("Y");
        Serial.println(volume);
        break;
      case 'S':
        if (buff[1] == 'a')
        {
          scan_start = (atol(buff + 2) + 5) / 10;
          Serial.println("Sa");
        }
        else if (buff[1] == 'b')
        {
          scan_end = (atol(buff + 2) + 5) / 10;
          Serial.println("Sb"); 
        }
        else if (buff[1] == 'c')
          scan_step = atol(buff + 2) / 10;
        else if (buff[1] == 'f')
          scan_filter = atol(buff + 2);
        else if (scan_start > 0 && scan_end > 0 && scan_step > 0 && scan_filter >= 0)
        {
          if (buff[1] == 'm')
          {
            scan(true);   // Multiple (continous) scan
            Serial.println("Smultiple"); 
          }
          else
          {
            scan(false);  // Single scan
            Serial.println("Ssingle");
          }
        }
        break;
     case 'T':  // Tune to a frequency
        freq = atol(buff + 1);
        REG_FREQ = (freq + 5) / 10;
        Set_Cmd(32, 1, 2, 1, REG_FREQ);
        Serial.print('V');
        Serial.print(60, DEC);  // Pseudo DAA
        Serial.print("\nT");
        Serial.print((uint32_t)REG_FREQ * 10, DEC);
        Serial.print('\n');
        break;
      case 'F':  // Change FIR filters
        current_filter = atoi(buff + 1);
        Set_Cmd(32, 10, 4, current_filter == -1 ? 1 : 0, pgm_read_byte_near(FMFilterMap + current_filter), 1000, 1000);
        Serial.print('F');
        Serial.println(buff + 1);
        break;
      case 'X':  // shutdown
        Set_Cmd(64, 1, 1, 1);
        TWCR = 0;  // Release SDA and SCL lines used by hardware I2C
        Serial.println("X");
        delay(10);
        asm("jmp 0");
        break;
      }
    }
  }

displayInfo();

 // RadioText 
/*
for (byte k = 0; k < 20; k++)
{
rdsRadioText1[k] = " "; 
}
for (byte k = 0; k < 32; k++)
{
rdsRadioText1[k+20] = rdsRadioText[k]; 
}

for (byte k = 0; k < 20; k++)
{
rdsRadioText1[k+52] = " "; 
}

 if ((millis() - timer_scroll) >= 200)
  {
    j = j+1;
    timer_scroll = millis();
  }

if (j > 52) j = 0;
    for (int i = 0; i < 20; i++) 
     {
      lcd.setCursor(i,2);
      lcd.print(rdsRadioText1[i+j]);   
     }
  //   delay(100);
*/

if ((millis() - timer_scroll) >= 200)
  {
    j = j+1;
    timer_scroll = millis();
  }

if (j > 64) j = 0;
    for (int i = 0; i < 20; i++) 
     {
      lcd.setCursor(i,2);
      lcd.print(rdsRadioText[(i+j)%64]);   
     }

}  // end main loop

void get_RDS()
 {
// https://en.wikipedia.org/wiki/Radio_Data_System#Program_types
/*
const char* ptyLUT[51] = { // America
      "      None      ",
      "      News      ",
      "  Information   ",
      "     Sports     ",
      "      Talk      ",
      "      Rock      ",
      "  Classic Rock  ",
      "   Adult Hits   ",
      "   Soft Rock    ",
      "     Top 40     ",
      "    Country     ",
      "     Oldies     ",
      "      Soft      ",
      "   Nostalgia    ",
      "      Jazz      ",
      "   Classical    ",
      "Rhythm and Blues",
      "   Soft R & B   ",
      "Foreign Language",
      "Religious Music ",
      " Religious Talk ",
      "  Personality   ",
      "     Public     ",
      "    College     ",
      " Reserved  -24- ",
      " Reserved  -25- ",
      " Reserved  -26- ",
      " Reserved  -27- ",
      " Reserved  -28- ",
      "     Weather    ",
      " Emergency Test ",
      "  !!!ALERT!!!   ",
      "Current Affairs ",
      "   Education    ",
      "     Drama      ",
      "    Cultures    ",
      "    Science     ",
      " Varied Speech  ",
      " Easy Listening ",
      " Light Classics ",
      "Serious Classics",
      "  Other Music   ",
      "    Finance     ",
      "Children's Progs",
      " Social Affairs ",
      "    Phone In    ",
      "Travel & Touring",
      "Leisure & Hobby ",
      " National Music ",
      "   Folk Music   ",
      "  Documentary   "};
*/

char* ptyLUT[51] = {   // Europe
      "      None      ",
      "      News      ",
      " Current Affairs",
      "   Information  ",
      "      Sport     ",
      "    Education   ",
      "     Drama      ",
      "     Culture    ",
      "     Science    ",
      "    Variable    ",
      "    Pop Music   ",
      "   Rock Music   ",
      "  Easy Listening",
      " Light Classical",
      "SeriousClassical",
      "  Other Music   ",
      "     Weather    ",
      "     Finance    ",
      " Childrens Prog ",
      " Social Affairs ",
      " Religious Talk ",
      "  Phone-In Talk ",
      "     Travel     ",
      "    Leisure     ",
      "   Jazz Music   ",
      "  Country Music ",
      "  National Music",
      "  Oldies Music  ",
      "   Folk Music   ",
      "   Documentary  ",
      " Emergency Test ",
      "  !!!ALERT!!!   ",
      "Current Affairs ",
      "   Education    ",
      "     Drama      ",
      "    Cultures    ",
      "    Science     ",
      " Varied Speech  ",
      " Easy Listening ",
      " Light Classics ",
      "Serious Classics",
      "  Other Music   ",
      "    Finance     ",
      "Children's Progs",
      " Social Affairs ",
      "    Phone In    ",
      "Travel & Touring",
      "Leisure & Hobby ",
      " National Music ",
      "   Folk Music   ",
      "  Documentary   "};
  
   int16_t uRds_Data[6] = {0};
   Get_Cmd(32, 131, uRds_Data, 8);

   if ( bitRead(uRds_Data[0], 15) == 1 )
    {
      Serial.print('P');
   //   lcd.print(10+q,0);
      serial_hex(uRds_Data[1] >> 8);
      lcd1_hex(uRds_Data[1] >> 8);
      serial_hex(uRds_Data[1]);
      lcd1_hex(uRds_Data[1]);
     // q++;
     // q = q%4;
      Serial.print('\n');

      Serial.print('R');
      serial_hex(uRds_Data[2] >> 8);
      serial_hex(uRds_Data[2]);
   //   Serial.print('/');
      serial_hex(uRds_Data[3] >> 8);
     serial_hex(uRds_Data[3]);
   //   Serial.print('/');
      serial_hex(uRds_Data[4] >> 8);
      serial_hex(uRds_Data[4]);
  //    Serial.print('/');
     serial_hex(uRds_Data[5] >> 8);
      Serial.print('\n');

//uint8_t rdsBHigh, rdsBLow, rdsCHigh, rdsCLow, rdsDHigh, rdsDLow, isPsReady;
  uint8_t rdsBHigh, rdsBLow, rdsCHigh, rdsCLow, rdsDHigh, isReady, rdsDLow;
    rdsBHigh = (uint8_t)(uRds_Data[2] >> 8);
    rdsBLow = (uint8_t)uRds_Data[2];
    rdsCHigh = (uint8_t)(uRds_Data[3] >> 8);
    rdsCLow = (uint8_t)uRds_Data[3];
    rdsDHigh = (uint8_t)(uRds_Data[4] >> 8);
    rdsDLow = (uint8_t)uRds_Data[4];
    
 uint8_t errA = (uRds_Data[5] & 0b1100000000000000) >> 14;
    uint8_t errB = (uRds_Data[5] & 0b0011000000000000) >> 12;
    uint8_t errC = (uRds_Data[5] & 0b0000110000000000) >> 10;
    uint8_t errD = (uRds_Data[5] & 0b0000001100000000) >> 8;
    
   // group type (0: PS, 2: RT, 4: CT, 10: PTYN

 // PTY
  if (errB <= 1) {
    uint8_t programType = ((rdsBHigh & 3) << 3) | ((rdsBLow >> 5) & 7);
    strcpy(rdsProgramType, (programType >= 0 && programType < 32) ? ptyLUT[programType] : "    PTY ERROR   ");
  }   

//    Serial.println(rdsProgramType);
      
    uint8_t type = (rdsBHigh >> 4) & 15;      
    
uint8_t version = bitRead(rdsBHigh, 4);
  
  // Groups 0A & 0B
  // Basic tuning and switching information only
  if (type == 0) {
    uint8_t address = rdsBLow & 3;
    // Groups 0A & 0B: to extract PS segment we need blocks 1 and 3
    if (address >= 0 && address <= 3) {
      if (rdsDHigh != '\0') {
        rdsProgramService[address * 2] = rdsDHigh;
      }  
      if (rdsDLow != '\0') {
        rdsProgramService[address * 2 + 1] = rdsDLow;
      }  
      isReady = (address == 3) ? 1 : 0;
    } 
    rdsFormatString(rdsProgramService, 8);
  }
  // Groups 2A & 2B
  // Radio Text
  else if (type == 2) {
    uint16_t addressRT = rdsBLow & 15;
    uint8_t ab = bitRead(rdsBLow, 4);
    uint8_t cr = 0;
    uint8_t len = 64;
    if (version == 0) {
      if (addressRT >= 0 && addressRT <= 15) {
        if (rdsCHigh != 0x0D) {
          rdsRadioText[addressRT*4] = rdsCHigh;
        }  
        else {
          len = addressRT * 4;
          cr = 1;
        }
        if (rdsCLow != 0x0D) {
          rdsRadioText[addressRT * 4 + 1] = rdsCLow;
        }  
        else {
          len = addressRT * 4 + 1;
          cr = 1;
        }
        if (rdsDHigh != 0x0D) {
          rdsRadioText[addressRT * 4 + 2] = rdsDHigh;
        }  
        else {
          len = addressRT * 4 + 2;
          cr = 1;
        }
        if (rdsDLow != 0x0D) {
          rdsRadioText[addressRT * 4 + 3] = rdsDLow;
        }
        else {
          len = addressRT * 4 + 3;
          cr = 1;
        }
      }
    }
    else {
      if (addressRT >= 0 && addressRT <= 7) {
        if (rdsDHigh != '\0') {
          rdsRadioText[addressRT * 2] = rdsDHigh;
        }  
        if (rdsDLow != '\0') {
          rdsRadioText[addressRT * 2 + 1] = rdsDLow;
        }
      }
    }
    if (cr) {
      for (uint8_t i = len; i < 64; i++) {
        rdsRadioText[i] = ' ';
      }
    }
    if (ab != rdsAb) {      
      for (uint8_t i = 0; i < 64; i++) {
        rdsRadioText[i] = ' ';
      }
      rdsRadioText[64] = '\0';     
      isRdsNewRadioText = 1;
    }
    else {
      isRdsNewRadioText = 0;
    }
    rdsAb = ab;
    rdsFormatString(rdsRadioText, 64);
  }


//Serial.println(rdsRadioText);
 
  lcd.setCursor(10,1);
  lcd.print(rdsProgramService); 
//  lcd.print(rdsProgramServiceUnsafe); 

    }
 }

void serial_hex(uint8_t val)
 {
    Serial.print((val >> 4) & 0xF, HEX);
    Serial.print(val & 0xF, HEX);
 }

void lcd1_hex(uint8_t val)
 {
   // lcd.print(10+q,2);
    lcd.print((val >> 4) & 0xF, HEX);
    lcd.print(val & 0xF, HEX);
    //q++;
 }

/* XDR-GTK/XDR_I2C interface filter index to TEF6686 filter index remap
|--          XDR-GTK/XDR_I2C         --|   |-- TEF6686 FM --|  |-- TEF6686 AM --|
FM BW*    AM BW*   XDR-GTK/XDR_I2C Index    FM BW    BW3-BW0    AM BW     BW3-BW0
Auto                       -1                Auto       0
9k       1.1k            31                 56k       1       3k       1
15k       1.9k            16                 56k       1       4k       1
17k       2.2k            17                 56k       1       6k       2
20k       2.5k            18                 56k       1       8k       3
24k       2.9k            19                 56k       1       8k       4
27k       3.4k            20                 56k       1       8k       5
32k       3.9k            21                 56k       1       8k       6
36k       4.6k            22                 56k       1       8k       7
42k       5.2k            23                 56k       1       8k       8
48k       6.0k            24                 56k       1       8k       9
55k       6.9k             0                 56k       1       8k      10
63k       7.9k            26                 64k       1       8k      11
73k       9.1k             1                 72k       1       8k      12
83k      10.4k            28                 84k       2       8k      13
90k      11.3k             2                 84k       2       8k      14
95k      11.8k            29                 97k       2       8k      14
108k      13.5k             3                114k       3       8k      15
125k      15.6k             4                133k       4       8k      15
142k      17.8k             5                151k       5       8k      15
159k      19.9k             6                168k       6       8k      15
177k      22.1k             7                184k       7       8k      15
194k      24.3k             8                200k       8       8k      15
211k      26.4k             9                217k       9       8k      15
229k      28.6k            10                236k      10       8k      15
246k      30.8k            11                254k      11       8k      15
263k      32.9k            12                287k      12       8k      15
281k      35.1k            13                311k      13       8k      15
298k      37.3k            14                311k      14       8k      15
309k      38.6k            15                311k      15       8k       0
*/

void displayInfo() {

    // frequency
    lcd.setCursor(0, 0);
    if (REG_FREQ < 10000) lcd.print(" ");
    lcd.print(REG_FREQ/100); 
    lcd.print(",");
    lcd.print(REG_FREQ%100/10); // thanks to carkiller08
    lcd.print(REG_FREQ%10);
    lcd.print("MHz");

   // stereo
    lcd.setCursor(0,1);
    if (streo == 's')
    {
    lcd.write(2);  // speaker2 sign
    }
    else
    lcd.print(" ");   
   
    // volume
    lcd.setCursor(1,1);
    lcd.write(1);  // speaker sign
    if (volume < 100) lcd.print(" ");
    if (volume < 10) lcd.print(" ");    
    lcd.print(volume);
    lcd.print("% ");

    // antenna level
 //   nivel = uQuality[1] / 10;
    if (nivel > 100) nivel = 0;
    lcd.setCursor(15,0);
    if (nivel < 100)
    lcd.print(" "); 
    if (nivel < 10)
    lcd.print(" ");      
    lcd.print(nivel);
    lcd.print("%");
    lcd.write(0);  // antenna sign

    // programID (PI)
 //   lcd.setCursor(10,0);
 //    lcd.print(serial_hex(uRds_Data[1] >> 8));
 //    lcd.print(serial_hex(uRds_Data[1]));
    //lcd.print("Pi: ");
    //lcd.print(programIdPrevious); 
//    lcd.print(" ");



    //PTY
     lcd.setCursor(0,3);
     lcd.print("PTY:"); 
       for (int i = 0; i < 15; i++) 
     {
      lcd.setCursor(i+4,3);
      lcd.print(rdsProgramType[i]);   
     }
//     rdsRT = rdsRadioText;
 /*  
    // RadioText 
    for (int j = 0; j < 44; j++)
    {
    for (int i = 0; i < 20; i++) 
     {
      lcd.setCursor(i,2);
      lcd.print(rdsRadioText[i+j]);   
     }
     delay(100);
    }
*/

}

void clearRDS() {
      lcd.setCursor(10,0);
      lcd.print("    ");
      lcd.setCursor(10,1);
      lcd.print("        ");
      lcd.setCursor(0,2);
      lcd.print("                    ");
      lcd.setCursor(0,3);
      lcd.print("                    ");
  strcpy(rdsProgramService, "        ");
  strcpy(rdsProgramServiceUnsafe, "        ");
  strcpy(rdsProgramType, "                ");
  strcpy(rdsRadioText, "                                                                                    ");
  psErrors = 0xFFFFFFFF;
  psCharIsSet = 0;
}

void rdsFormatString(char* str, uint16_t length) {
  for (uint16_t i = 0; i < length; i++) {
    if ((str[i] != 0 && str[i] < 32) || str[i] > 126 ) {
      str[i] = ' ';
    }
  }
}
